#!/usr/bin/env python3
#
#  Program rgb2cpt:
#  Convert NCL/PyNGL *.rgb color palette file to GMT *.cpt format.
#
# Creation date: 2016 Dec 18
# Author:
# Hui Zheng
# Institute of Atmopsheric Physics, Chinese Academy of Sciences
# Inspired by cpt2rgb.py of Derrick Snowden at NOAA/AOML


import os
import sys
import argparse
import numpy as np


def readrgb(name):
    f = open(name,'rt')
    lines = f.readlines()
    f.close()
    return lines


def rgbcolormap(lines):
    reds = []
    greens = []
    blues = []
    for l in lines:
        ls = l.split()
        if l[0] == '#':
            pass
        elif l[0:7].lower() == 'ncolors':
            pass
        else:
            reds.append(float(ls[0]))
            greens.append(float(ls[1]))
            blues.append(float(ls[2]))
    return reds, greens, blues


def writecpt(cptfile, name, reds, greens, blues):
    colorModel = 'RGB'
    cptfile.write('# {:s}\n'.format(name))
    cptfile.write('# generated by rgb2cpt.\n')
    cptfile.write('# COLOR_MODE = {:s}\n'.format(colorModel))
    for ii, r, g, b in zip(range(len(reds)), reds, greens, blues):
        cptfile.write('{0:3d} {2:3.0f} {3:3.0f} {4:3.0f} {1:3d} {2:3.0f} {3:3.0f} {4:3.0f}\n'.format(ii, ii+1, r*255, g*255, b*255))
    cptfile.write('B   0   0   0\n')
    cptfile.write('F 255 255 255\n')
    cptfile.write('N 255 255 255\n')
    pass


def main ():
    usage = "\n%(prog)s: Converts NCL *.rgb color palette file to *.cpt format used by GMT.\n\n\
    This program will convert between an RGB colormap stored in a *.rgb file \n \
    used by NCL/PyNGL into an Color Palatte Tables(CPT). \n"
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument('rgbfilename', nargs=1, type=str,
                        help='Input rgb file to translate (rgb extention is optional).')
    parser.add_argument("-o", "--outputfile", type=str, dest='cptfilename',
                        default='stdout',
                        help='Output cpt file to write (cpt extension is optional) [default stdout].')
    parser.add_argument('-v', '--verbose',
                        action='store_true', dest='verbose',
                        help='Execute in verbose model')
    parser.add_argument('-q', '--quiet',
                        action='store_false', dest='verbose',
                        help='Cancel verbose model')
    parser.add_argument('--version', action='version', version='%(prog)s 1.0')
    options = parser.parse_args();

    rgbfilename = options.rgbfilename[0]
    if not rgbfilename.endswith('.rgb'):
        rgbfilename = rgbfilename + '.rgb'

    if options.verbose:
        print("reading {:s} ...".format(rgbfilename))

    rgb = readrgb(rgbfilename)

    reds, greens, blues = rgbcolormap(rgb)

    # Where to write the output?
    if options.cptfilename == 'stdout':
        cptfile = sys.stdout
        cptname = os.path.basename(rgbfilename)
    else:
        if options.cptfilename.endswith('.cpt'):
            outfilename = options.cptfilename
            cptname = os.path.basename(outfilename)
        else:
            outfilename = options.cptfilename + '.cpt'
            cptname = os.path.basename(outfilename)
        cptfile = open(outfilename, 'wt')

    writecpt(cptfile, cptname, reds, greens, blues)

    cptfile.close()
    pass


if __name__ == "__main__":
    main()
